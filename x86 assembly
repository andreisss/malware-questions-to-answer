### The registers are categorized as being one of the following:
-- General purpose registers
-- Segment registers
-- Flag registers
-- Instruction pointers


In x86 architecture, each general purpose register has its designated purpose and is stored at WORD size, or 16 bits, as follows:
-- Accumulator (AX)
-- Counter (CX)
-- Data (DX)
-- Base (BX)
-- Stack pointer (SP)
-- Base pointer (BP)
-- Source index (SI)
-- Destination index (DI)

Endianness
When reading or writing data to memory, we use the registers or memory to process them as BYTE, WORD, DWORD, or even QWORD. Depending on the platform or program, data is read
in little-endian or big-endian form. In little-endian, a chunk of data read into a DWORD is reversed. Let's take the following piece of data as an example:
AA BB CC DD
When the data on a file or memory looks like this, in little-endian format, it will be read as DDCCBBAAh in a DWORD value. 
This endianness is common to Windows applications.
In the big-endian system, the same chunk of data will be read as AABBCCDDh.
The advantage of using the big-endian form arises when reading streaming data such as file,  serial, and network streams.
The advantage of reading in little-endian is that the address you read it from remains fixed, regardless of whether it is read as BYTE, WORD, or DWORD. For example, consider the

Address Byte
0x00000000 AA
0x00000001 00
0x00000002 00
0x00000003 00


<blockquote class="imgur-embed-pub" lang="en" data-id="a/gHtgofV" data-context="false" ><a href="//imgur.com/a/gHtgofV"></a></blockquote><script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script>
